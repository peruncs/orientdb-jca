group = 'com.peruncs'
version = "${orientdb_jca_version}"

apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven-publish'

sourceCompatibility = "${java_lang_level}"
targetCompatibility = "${java_lang_level}"

def customManifest = manifest {
    attributes(
            'Specification-Title': 'OrinetDB 3 Java EE JCA adapter',
            'Implementation-Title': 'OrinetDB 3 Java EE JCA adapter',
            'Build-Timestamp': java.time.Instant.now().toString(),
            'Specification-Vendor': 'peruncs.com',
            'Implementation-Vendor': 'peruncs.com',
            'Automatic-Module-Name': 'com.peruncs.odbjca',
            'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-With': "Gradle ${gradle.gradleVersion}",
    )
}

tasks.withType(JavaCompile) {
    options.incremental = true
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xlint:deprecation"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'http://oss.sonatype.org/content/repositories/snapshots/' }
}


configurations {
    odb {
        transitive true
        exclude group: 'javax.mail'
        exclude group: 'javax.xml'
        exclude group: 'javax.xml.bind'
        exclude group: 'com.sun.xml.bind'
        exclude group: 'stax'
    }
}

dependencies {
    compileOnly "javax.resource:javax.resource-api:${jca_version}"
    compileOnly "com.orientechnologies:orientdb-server:${orientdb_version}"

    //OrientDB shared lib dependencies
    odb "com.orientechnologies:orientdb-core:${orientdb_version}"
    odb "com.orientechnologies:orientdb-server:${orientdb_version}"
    odb "com.orientechnologies:orientdb-distributed:${orientdb_version}"
    odb "com.orientechnologies:orientdb-client:${orientdb_version}"
}


task jarJar(type: Jar, dependsOn: classes) {
    manifest = customManifest
    from sourceSets.main.output
}

task srcJar(type: Jar, dependsOn: classes) {
    manifest = customManifest
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task rarJar(type: Jar, dependsOn: classes) {
    manifest = customManifest
    extension 'rar'
    from sourceSets.main.output
}

task rarAllJar(type: Jar, dependsOn: classes) {
    manifest = customManifest
    extension 'rarall'
    from sourceSets.main.output
    from configurations.odb
}


task javadocJar(type: Jar) {
    manifest = customManifest
    from javadoc
    archiveClassifier = 'javadoc'
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html4', true)
    }
    failOnError false
}

publishing {
    publications {
        publication(MavenPublication) {
            artifact jarJar
            artifact rarAllJar
            artifact rarJar
            artifact srcJar
            artifact javadocJar
            //artifactId 'orient'
            pom {
                name = "OrientDB JCA"
                description = "OrientDB"
                url = "https://github.com/peruncs/orientdb-jca"
                organization {
                    name = "Perun Consulting Services, Inc"
                    url = "www.peruncs.com"
                }
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                scm {
                    connection = "https://github.com/peruncs/orientdb-jca/tree/master"
                    developerConnection = "https://github.com/peruncs/orientdb-jca/tree/master"
                    url = "hhttps://github.com/peruncs/orientdb-jca"
                }
                developers {
                    developer {
                        id = 'hr.stoyanov'
                        name = 'Hristo Stoyanov'
                        email = 'hr.stoyanov@peruncs.com'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ?
                    "https://oss.sonatype.org/content/repositories/snapshots/"
                    : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }

}


signing {
    sign publishing.publications.publication
}
